version: '3.8'

networks:
  tracker_network:
    driver: bridge

services:
  nginx:
    image: nginx:stable-alpine
    container_name: ks-nginx
    ports:
      - "80:80"
    depends_on:
      - php
    networks:
      - tracker_network
    volumes:
      - ./tracker:/app
      - ./docker/nginx/conf.d/default.conf:/etc/nginx/conf.d/default.conf
      - ./docker/nginx/logs:/var/log/nginx

  postgres:
    image: postgres:14-alpine3.15
    container_name: ks-postgres
    hostname: ks-postgres
    ports:
      - "5432:5432"
    restart: unless-stopped
    tty: true
    environment:
      POSTGRES_HOST_AUTH_METHOD: trust
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: secret
      POSTGRES_DB: db
      DB_DATABASE_TESTING: db-test
    volumes:
      - ./docker/postgres/pg-data:/var/lib/postgresql/data
      - ./docker/postgres:/docker-entrypoint-initdb.d
    networks:
      - tracker_network

  php:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ks-php
    environment:
        DATABASE_URL: postgresql://postgres:secret@postgres:5432/db
        DB_HOST: postgres
        DB_PORT: 5432
        DB_DATABASE: db
        DB_USERNAME: postgres
        DB_PASSWORD: secret
        DB_DATABASE_TESTING: db-test
#    command: tail -f /dev/null
    ports:
      - "8000:8000"
    volumes:
      - ./docker/config/php.conf.ini:/usr/local/etc/php/conf.d/php.ini
      - ./tracker:/app
    networks:
      - tracker_network

  admin-frontend:
    image: node:14
    container_name: ks-admin-frontend
    command: npm run serve
    working_dir: /app/frontend
#    command: tail -f /dev/null
    volumes:
      - ./tracker/app/frontend:/app/frontend
    ports:
      - "8080:8080"
    networks:
      - tracker_network
volumes:
  pg-data:
    driver: local

